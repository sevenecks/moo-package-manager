{"mpm_version":1.3,"package_changelog":"","package_created_at":1643083528,"package_created_by":"Slither (#2)","package_data":{"aliases":["MOO","task","Scheduler","MOO task Scheduler"],"cored_property_references":{},"corified_references":["scheduler"],"dependent_verb_map":{},"name":"MOO task Scheduler","object":"#112|obj","parent":"#78|obj","parent_data":{"aliases":["Generic Utilities Package"],"cored_property_references":{},"corified_references":["generic_utils","util"],"dependent_verb_map":{},"name":"Generic Utilities Package","object":"#78|obj","parent":"#1|obj","parent_data":{"aliases":[],"corified_references":["root_class"],"name":"Root Class","object":"#1|obj"},"properties":{"property_data":{},"property_names":[]},"verbs":{"verb_data":{},"verb_names":[]}},"properties":{"property_data":{"aliases":{"info":["#2|obj","rc"],"value":["MOO","task","Scheduler","MOO task Scheduler"]},"description":{"info":["#2|obj","rc"],"value":"The Almighty Scheduler"},"help_msg":{"info":["#2|obj","rc"],"value":["OVERVIEW","","The scheduler will start when the first item is scheduled. You can schedule verbs to run once at a specific time (schedule_at), or once in a certain amount of seconds (schedule_for), or you can schedule verbs to run over and over at certain intervals (schedule_every).","","DEBUGGING","","There are a number of places in the $scheduler code where you can add debugging as you desire. Many of these are called out with comments.","","SCHEDULING VERBS","","schedule_for( INT time, OBJ object, STR verbname [, LIST optional_args]) =>"," add verbname on object to be run at time seconds from now.  If optional_args is given, then they are  passed to the verb when it's run","","schedule_at( INT time, OBJ object, STR verbname [, LIST optional_args]) =>"," add verbname on object to be run at time (as time() returns).  If optional_args is given, then they  are passed to the verb when it's run","","schedule_every( VARIES interval, OBJ object, STR verbname [, LIST optional_args, INT allow_duplicates])"," add verbname on object to be run every interval seconds from now.  If optional_args is given, then they are passed to the verb when it's run"," if allow_duplicates is passed and true, duplicate entries will be allowed, otherwise they will not","","interval args supported:","  INT - fixed number of seconds","  STR - hh:mm:ss time less than 24 hours, every day as close to this time as possible","  {INT minimum, INT range} - between minimum and minimum+range seconds","  {OBJ timing_obj, STR verbname, [LIST additional args]} - calculated by call to timing_obj:verbname","","UNSCHEDULING VERBS","","remove_scheduled( OBJ object, STR verbname, LIST iargs = \"THIS IS A NULL VALUE\") => remove object:verbname from scheduled tasks to be run."," Returns 1 if the task was successfully removed, 0 if it wasn't"," Returns E_PERM if the caller is not the owner and not a wizard","","CHECKING IF VERBS ARE SCHEDULED","","is_scheduled(OBJ object, STR verbname) => returns 1 if the object:verbname is scheduled, 0 if it's not","",":when_scheduled(OBJ objt, STR verbname) => INT"," returns timestamp when a verb is scheduled for","","OTHER $SCHEDULER VERBS","","halt => stops scheduler","start => starts scheduler","","VIEWING ALL SCHEDULED TASKS","","To view all scheduled tasks you can 'look $scheduler'","","If you have the Scheduler Wizard Verbs package installed, type '@scheduled' with no arguments.","","VIEWING A PORTION OF SCHEDULED TASKS","","@scheduled allows you to slice and dice scheduled tasks as you see fit. Here are the options at your disposal:","","@scheduled repeat                             => display only scheduled tasks that are repeating","","@scheduled norepeat                           => display only scheduled tasks that do no repeat","","@scheduled soon                               => display tasks that are scheduled to run in the next 5 minutes","","@scheduled later                              => display tasks that are scheduled to run later than 5 minutes","","@scheduled interval                           => display scheduled tasks that are set to run at a varied interval IE: [200, 300]","","@scheduled verb                               => display scheduled tasks who's reschedule time is determined by a verb","","@scheduled timestring                         => display scheduled tasks that are rescheduled based on a time string IE: 15:00","","@scheduled seconds                            => display scheduled tasks that are rescheduled based on a set second based interval IE: 300","","@scheduled duplicates                         => display duplicate obj&verb combinations in the $scheduler","","@scheduled by <obj or name>                   => display verbs scheduled by a specific person","","@scheduled for <obj|corified ref or verbname> => display verbs scheduled for a specific object or verb","","@scheduled without <verb>                     => display verbs scheduled, excluding <verb>"]},"incoming_tasks":{"info":["#2|obj","r"],"value":[]},"jesus_running":{"info":["#2|obj","r"],"value":0},"kill_tasks":{"info":["#2|obj","r"],"value":[]},"killed_tasks":{"info":["#2|obj","r"],"value":[]},"processing":{"info":["#2|obj","r"],"value":0},"run_task":{"info":["#2|obj","rc"],"value":1081717185},"scheduled_tasks":{"info":["#2|obj","r"],"value":[]}},"property_names":["aliases","description","help_msg","run_task","scheduled_tasks","processing","kill_tasks","killed_tasks","jesus_running","incoming_tasks"]},"verbs":{"verb_data":{"check_repeat_args":{"args":["this","none","this"],"code":["{repeat} = args;","typeis = typeof(repeat);","if (typeis == LIST)","  if (!repeat || length(repeat) < 2)","    raise(E_INVARG, \"repeat arg bad value\", repeat);","  endif","  a = typeof(repeat[1]);","  b = typeof(repeat[2]);","  if (a == OBJ)","    if (b != STR)","      raise(E_INVARG, \"repeat arg object:verb not right\", repeat);","    elseif (!$object_utils:has_callable_verb(repeat[1], repeat[2]))","      raise(E_INVARG, \"repeat arg object:verb is not callable/exist\", repeat);","    endif","  elseif (a == INT)","    if (b != INT)","      raise(E_INVARG, \"repeat arg range not right\", repeat);","    endif","  else","    raise(E_INVARG, \"repeat arg range not right\", repeat);","  endif","elseif (typeis == STR)","  try","    $time_utils:seconds_until_time(repeat);","  except e (ANY)","    raise(E_INVARG, \"repeat arg specific time string not in hh:mm:ss format\", repeat);","  endtry","elseif (typeis != INT)","  raise(E_INVARG, \"repeat arg type invalid\", repeat);","endif"],"cored_props_in_code":[],"cored_verbs_in_code":["object_utils:has_callable_verb","time_utils:seconds_until_time"],"direct_cored_verbs_in_code":["object_utils","time_utils"],"info":["#98|obj","rxd","check_repeat_args"],"wizard":0},"core_references":{"args":["this","none","this"],"code":["\":core_references(OBJ thing) => LIST\";","\"return a list of props on $sysobj that point to thing\";","{thing} = args;","refs = {};","for ref in (properties($sysobj))","  yin(0);","  if ($sysobj.(ref) == thing)","    refs = {@refs, ref};","  endif","endfor","return refs;"],"cored_props_in_code":[],"cored_verbs_in_code":[],"direct_cored_verbs_in_code":["sysobj"],"info":["#2|obj","rxd","core_references"],"wizard":1},"describe_repeat":{"args":["this","none","this"],"code":["{repeat} = args;","if (!repeat)","  return \"\";","elseif (typeof(repeat) == INT)","  return $string_utils:from_seconds(repeat);","elseif (typeof(repeat) == LIST)","  if (typeof(repeat[1]) == INT)","    return tostr(repeat[1], \" to \", repeat[1] + repeat[2], \" seconds\");","  else","    return tostr(repeat[1], \":\", repeat[2]);","  endif","elseif (typeof(repeat) == STR)","  return repeat;","endif","return \"bad args\";"],"cored_props_in_code":[],"cored_verbs_in_code":["string_utils:from_seconds"],"direct_cored_verbs_in_code":["string_utils"],"info":["#2|obj","rxd","describe_repeat"],"wizard":1},"display_schedule":{"args":["this","none","this"],"code":["\":display_schedule(?LIST tasks) => none\";","\"display the scheduled tasks that are passed in, or the entire schedule if none passed in\";","{?to_do = this.scheduled_tasks} = args;","filter = $nothing;","if (args && typeof(args[1]) == OBJ)","  filter = args[1];","endif","player:tell(\"Current Time: \", ctime());","running = $code_utils:task_valid(this.run_task) ? \"YES\" | \"NO\";","player:tell(\"Currently Running: \", running);","su = $string_utils;","head = tostr(su:left(\"Next Run Time\", 30), su:left(\"Repeat\", 25), su:left(\"Owner\", 10), \"Verb\");","head2 = tostr(su:left(\"-------------\", 30), su:left(\"------\", 25), su:left(\"-----\", 10), \"----\");","display = {head, head2};","toggle = 1;","decaying = {};","for event in (to_do)","  {repeat, object, verbo, runtime, owner, ?opargs = {}} = event;","  if (verbo == \"item_decay\")","    decaying = setadd(decaying, object);","    continue;","  endif","  if (filter == $nothing || $object_utils:isa(object, filter))","    rep_str = this:describe_repeat(repeat);","    thing = (references = this:core_references(object)) ? \"$\" + references[1] | tostr(object);","    msg = tostr(su:left(ctime(runtime), 30)[1..30], su:left(rep_str, 25)[1..25], su:left(owner.name, 10)[1..10], thing, \":\", verbo, \"(\", toliteral(opargs)[2..$ - 1], \")\");","    display = {@display, msg};","    toggle = !toggle;","  endif","  ticks_left() < 2000 || seconds_left() < 2 && suspend(min($login:current_lag(), 10));","endfor","player:tell(\"Current scheduled tasks:\");","player:tell(su:space(90, \"*\"));","player:tell_lines(display);","player:tell(su:space(90, \"*\"));","if (decaying)","  player:tell(\"Decaying Items [aka - object:item_decay()]\");","  player:tell($string_utils:english_list(decaying));","endif","player:tell(\"List too long? 'help $scheduler' to view @scheduled options to prune it down.\");"],"cored_props_in_code":[],"cored_verbs_in_code":["code_utils:task_valid","object_utils:isa","login:current_lag","string_utils:english_list"],"direct_cored_verbs_in_code":["nothing","code_utils","string_utils","object_utils","login"],"info":["#2|obj","rxd","display_schedule"],"wizard":1},"is_scheduled":{"args":["this","none","this"],"code":["\":is_scheduled(object OBJ, verbname STR) => returns 1 if the object:verbname is scheduled, 0 if it's not\";","{objt, verbname} = args;","for tasks in ({this.scheduled_tasks, this.incoming_tasks})","  for x in (tasks)","    $command_utils:suspend_if_needed(0);","    if (x[2] == objt && x[3] == verbname)","      return 1;","    endif","  endfor","endfor","return 0;"],"cored_props_in_code":[],"cored_verbs_in_code":["command_utils:suspend_if_needed"],"direct_cored_verbs_in_code":["command_utils"],"info":["#2|obj","rxd","is_scheduled"],"wizard":1},"jesus":{"args":["this","none","this"],"code":["if (this.jesus_running)","  for x in (this.kill_tasks)","    stack = `task_stack(x, 1) ! E_INVARG => {}';","    if (stack && (stack[1][1] == $command_utils && (stack[1][2] == \"sin\" || stack[1][2] == \"suspend_if_needed\")))","      `kill_task(x) ! ANY';","      this.killed_tasks = setadd(this.killed_tasks, {stack, time(), connected_players()});","      try","        prefix = \" \";","        for y in (stack)","          {c_this, c_verb, c_progger, c_verbloc, c_player, c_line} = y;","          prefix = prefix + \".\";","        endfor","      except e (ANY)","        \"can't risk dumping this error anywhere\";","      endtry","    endif","    this.kill_tasks = setremove(this.kill_tasks, x);","  endfor","  for x in (queued_tasks())","    if (x[7] == \"suspend_if_needed sin\")","      this.kill_tasks = setadd(this.kill_tasks, x[1]);","    endif","  endfor","endif","fork (60)","  this:jesus();","endfork"],"cored_props_in_code":[],"cored_verbs_in_code":[],"direct_cored_verbs_in_code":[],"info":["#2|obj","rxd","jesus"],"wizard":1},"look_self":{"args":["this","none","this"],"code":["pass(@args);","this:display_schedule();"],"cored_props_in_code":[],"cored_verbs_in_code":[],"direct_cored_verbs_in_code":[],"info":["#2|obj","rxd","look_self"],"wizard":1},"match":{"args":["this","none","this"],"code":["command = callers()[$][2];","if (command in {\"look\", \"l\"})","  filter = args[1];","  thing = $string_utils:literal_object(filter, player);","  if (!$recycler:valid(thing))","    thing = $match_utils:match(filter, $list_utils:slice(this.scheduled_tasks, 2));","    if (!$recycler:valid(thing))","      return thing;","    endif","  endif","  this:look_self(thing);","  return \"null\";","endif","return pass(@args);"],"cored_props_in_code":[],"cored_verbs_in_code":["string_utils:literal_object","recycler:valid","match_utils:match","list_utils:slice"],"direct_cored_verbs_in_code":["string_utils","recycler","match_utils","list_utils"],"info":["#2|obj","rxd","match"],"wizard":1},"next_runtime":{"args":["this","none","this"],"code":["\":next_runtime(@scheduled_task) => runtime INT (time value)\";","\" given a scheduled task, calculates the next runtime\";","{repeat, object, verbo, runtime, owner, ?opargs = {}} = args;","repeat_type = typeof(repeat);","if (repeat)","  if (repeat_type == INT)","    \"static repeat interval, the usual (integer number of seconds)\";","    return time() + repeat;","  elseif (repeat_type == STR)","    \"dynamic interval based on $time_utils:seconds_until_time\";","    offset = $time_utils:seconds_until_time(repeat);","    return time() + (offset <= 0 ? offset + $time_utils.day | offset);","  elseif (repeat_type == LIST)","    \"dynamic interval\";","    {interval_obj, interval_verb, ?more_args = {}} = repeat;","    if (typeof(interval_obj) == INT && typeof(interval_verb) == INT)","      \"simple random interval between two values {interval_minimum, interval_range} {10, 5} = 10 to 15 seconds\";","      return time() + interval_obj + random(interval_verb);","    else","      \"calculated interval by calling a specified verb {interval_obj, interval_verbo} {#1234, \\\"calc_verbo_runtime\\\"} = some number of seconds\";","      try","        return time() + interval_obj:(interval_verb)(object, verbo, opargs, more_args);","      except e (ANY)","        \"TODO: add some error logging here for your server\";","        return 0;","      endtry","    endif","  endif","endif","return 0;"],"cored_props_in_code":["time_utils.day"],"cored_verbs_in_code":["time_utils:seconds_until_time"],"direct_cored_verbs_in_code":["time_utils"],"info":["#98|obj","rxd","next_runtime"],"wizard":0},"remove_scheduled":{"args":["this","none","this"],"code":["\"remove_scheduled( OBJ object, STR verbname, LIST iargs = \\\"THIS IS A NULL VALUE\\\") => remove object:verbname from scheduled tasks to be run.\";","\" Returns 1 if the task was successfully removed, 0 if it wasn't\";","\" Returns E_PERM if the caller is not the owner and not a wizard\";","{object, ?verbname = \"\", ?iargs = \"THIS IS A NULL VALUE\"} = args;","cp = caller_perms();","tasks = this.scheduled_tasks;","killed = 0;","for x in (tasks)","  $command_utils:suspend_if_needed(0);","  if (x[2] == object && (verbname == \"\" || x[3] == verbname) && (iargs == \"THIS IS A NULL VALUE\" || x[6] == iargs))","    if (cp == this.owner || cp.wizard || cp == x[5])","      this.scheduled_tasks = setremove(this.scheduled_tasks, x);","      killed = killed + 1;","    else","      return E_PERM;","    endif","  endif","endfor","tasks = this.incoming_tasks;","for x in (tasks)","  $command_utils:suspend_if_needed(0);","  if (x[2] == object && (verbname == \"\" || x[3] == verbname) && (iargs == \"THIS IS A NULL VALUE\" || x[6] == iargs))","    if (cp == this.owner || cp.wizard || cp == x[5])","      this.incoming_tasks = setremove(this.incoming_tasks, x);","      killed = killed + 1;","    else","      return E_PERM;","    endif","  endif","endfor","return killed;"],"cored_props_in_code":[],"cored_verbs_in_code":["command_utils:suspend_if_needed"],"direct_cored_verbs_in_code":["command_utils"],"info":["#2|obj","rxd","remove_scheduled"],"wizard":1},"run_scheduled":{"args":["this","none","this"],"code":["\"run_scheduled( [INT kill]) => if kill is provided and true then kill the scheduler task, otherwise start it\";","if (caller_perms().wizard)","  {?kill = 0} = args;","  if (kill)","    count = 1;","    while (this.processing && count < 11)","      suspend(1);","      count = count + 1;","    endwhile","    `kill_task(this.run_task) ! ANY';","  else","    if ($code_utils:task_valid(this.run_task) && task_id() != this.run_task)","      return 1;","    else","      \"do scheduled stuff here\";","      delay = 3600;","      tt = time();","      to_do = this.scheduled_tasks;","      if (!to_do)","        `kill_task(this.run_task) ! ANY';","      else","        this.processing = 1;","        new_tasks = {};","        for event in (to_do)","          {repeat, object, verbo, runtime, owner, ?opargs = {}} = event;","          if (typeof(opargs) != LIST)","            \"you may want to include some kind of error message surfacing here\";","            opargs = {opargs};","          endif","          did_run = 0;","          if (tt >= runtime)","            fork (0)","              try","                \"you can reset who the `player` is, possibly a generic $player_task_owner\";","                set_task_perms(owner);","                if ($recycler:valid(object))","                  object:(verbo)(@opargs);","                else","                  \"TODO: you may want to include some kind of error message handling here\";","                endif","              except ecodes (ANY)","                \"TODO: consider adding some error catching here on your server\";","              endtry","            endfork","            if (repeat && (runtime = this:next_runtime(@event)))","              if (runtime - time() < 10 && verbo != \"tick\")","                \"You may want to add some kind of error logging here\";","              endif","              new_tasks = {@new_tasks, {repeat, object, verbo, runtime, owner, opargs}};","            endif","            \"we no longer mark not processing at this point, now doing it just before we set the tasks prop below - J 3/29/20\";","            \"this.processing = 0\";","          else","            new_tasks = {@new_tasks, event};","          endif","          ticks_left() < 2000 || seconds_left() < 2 && suspend(min($login:current_lag(), 10));","        endfor","      endif","      if (this.incoming_tasks)","        \"add any tasks that were scheduled while this was running\";","        new_tasks = {@new_tasks, @this.incoming_tasks};","        this.incoming_tasks = {};","      endif","      if (new_tasks)","        new_tasks = $list_utils:sort_alist_suspended(1, new_tasks, 4);","        delay = new_tasks[1][4] - time();","        delay = max(delay, 1);","        fork SCHED (delay)","          this:(verb)();","        endfork","        this.run_task = SCHED;","      endif","      this.processing = 0;","      this.scheduled_tasks = new_tasks;","      return 1;","    endif","  endif","else","  return E_PERM;","endif"],"cored_props_in_code":[],"cored_verbs_in_code":["code_utils:task_valid","recycler:valid","login:current_lag","list_utils:sort_alist_suspended"],"direct_cored_verbs_in_code":["code_utils","recycler","login","list_utils"],"info":["#2|obj","rxd","run_scheduled"],"wizard":1},"schedule_at":{"args":["this","none","this"],"code":["\"schedule_at( INT time, OBJ object, STR verbname [, LIST optional_args]) =>\";","\"add verbname on object to be run at time (as time() returns).  If optional_args is given, then they are passed to the verb when it's run\";","{runtime, object, verbname, ?opargs = {}} = args;","repeat = 0;","tasks = this.scheduled_tasks;","objs = $list_utils:slice(tasks, 2);","verbage = $list_utils:slice(tasks, 3);","i = object in objs;","if (i && verbage[i] == verbname)","  return E_INVARG;","endif","task = {repeat, object, verbname, runtime, caller_perms(), opargs};","if (this.processing)","  this.incoming_tasks = {@this.incoming_tasks, task};","else","  this.scheduled_tasks = {@this.scheduled_tasks, task};","endif","this:halt();","return this:start();"],"cored_props_in_code":[],"cored_verbs_in_code":["list_utils:slice"],"direct_cored_verbs_in_code":["list_utils"],"info":["#2|obj","rxd","schedule_at"],"wizard":1},"schedule_every":{"args":["this","none","this"],"code":["\"schedule_every( VARIES interval, OBJ object, STR verbname [, LIST optional_args, INT allow_duplicates]) =>\";","\"add verbname on object to be run every interval seconds from now.  If optional_args is given, then they are passed to the verb when it's run\";","\"if allow_duplicates is passed and true, duplicate entries will be allowed, otherwise they will not\";","\"\";","\"interval args supported:\";","\"  INT - fixed number of seconds\";","\"  STR - hh:mm:ss time less than 24 hours, every day as close to this time as possible\";","\"  {INT minimum, INT range} - between minimum and minimum+range seconds\";","\"  {OBJ timing_obj, STR verbname, [LIST additional args]} - calculated by call to timing_obj:verbname\";","{repeat, object, verbname, ?opargs = {}, ?allow_duplicates = 0} = args;","\"throw E_INVARG if the repeat arg is bad\";","this:check_repeat_args(repeat);","runtime = time();","if (!allow_duplicates)","  tasks = this.scheduled_tasks;","  objs = $list_utils:slice(tasks, 2);","  verbage = $list_utils:slice(tasks, 3);","  i = object in objs;","  if (i && verbage[i] == verbname)","    return E_INVARG;","  endif","endif","task = {repeat, object, verbname, runtime, caller_perms(), opargs};","if (this.processing)","  this.incoming_tasks = {@this.incoming_tasks, task};","else","  this.scheduled_tasks = {@this.scheduled_tasks, task};","endif","this:halt();","return this:start();"],"cored_props_in_code":[],"cored_verbs_in_code":["list_utils:slice"],"direct_cored_verbs_in_code":["list_utils"],"info":["#2|obj","rxd","schedule_every"],"wizard":1},"schedule_for":{"args":["this","none","this"],"code":["\"schedule_for( INT time, OBJ object, STR verbname [, LIST optional_args]) =>\";","\"add verbname on object to be run at time seconds from now.  If optional_args is given, then they are passed to the verb when it's run\";","{runtime, object, verbname, ?opargs = {}} = args;","task = {0, object, verbname, time() + runtime, caller_perms(), opargs};","if (this.processing)","  this.incoming_tasks = {@this.incoming_tasks, task};","else","  this.scheduled_tasks = {@this.scheduled_tasks, task};","endif","this:halt();","return this:start();"],"cored_props_in_code":[],"cored_verbs_in_code":[],"direct_cored_verbs_in_code":[],"info":["#2|obj","rxd","schedule_for"],"wizard":1},"start halt":{"args":["this","none","this"],"code":["\"halt => stops scheduler\";","\"start => starts scheduler\";","kill = 0;","if (verb == \"halt\")","  kill = 1;","endif","return this:run_scheduled(kill);"],"cored_props_in_code":[],"cored_verbs_in_code":[],"direct_cored_verbs_in_code":[],"info":["#2|obj","rxd","start halt"],"wizard":1},"when_scheduled":{"args":["this","none","this"],"code":["\":when_scheduled(OBJ objt, STR verbname) => INT\";","\"returns timestamp when a verb is scheduled for\";","{objt, verbname} = args;","for tasks in ({this.scheduled_tasks, this.incoming_tasks})","  for x in (tasks)","    $command_utils:suspend_if_needed(0);","    if (x[2] == objt && x[3] == verbname)","      return x[4];","    endif","  endfor","endfor","return 0;"],"cored_props_in_code":[],"cored_verbs_in_code":["command_utils:suspend_if_needed"],"direct_cored_verbs_in_code":["command_utils"],"info":["#98|obj","rxd","when_scheduled"],"wizard":0}},"verb_names":["run_scheduled","schedule_for","schedule_at","start halt","schedule_every","look_self","remove_scheduled","jesus","is_scheduled","match","when_scheduled","next_runtime","check_repeat_args","describe_repeat","display_schedule","core_references"]}},"package_description":"This is a $scheduler which allows you to schedule verbs to be run at certain times, in a certain amount of time, or at certain intervals. It is what Sindome uses to handle all of its scheduled tasks. It has been in use there for two decades and is battle tested. It comes with a 'help $scheduler' help file with details on how to use it. If you choose to install this package, you should also consider installed the 'The Almighty Scheduler Wizard Verbs' which adds some tooling around viewing scheduled tasks.","package_hash":"3D7C3D32631A4D35E222FFC4A647841F","package_id":"CC0AE81254C9995C1850C17910A22A72","package_name":"The Almighty Scheduler","package_options":{"all_ignore_prop_list":["key","object_size"],"all_include_prop_list":[],"allow_dynamic_prop_calls":true,"allow_dynamic_verb_calls":true,"dont_serialize_ancestry":false,"dont_serialize_cored_aliases":false,"dry_run":false,"fully_serialize_parent":false,"ignore_all_cored_props":true,"ignore_all_non_cored_props":false,"object_prop_ignore_list":{},"object_prop_include_list":{},"object_prop_reset_list":{},"only_origin_object":true,"package_object":"#112|obj","post_install_verb":false,"select_verbs":false,"serialize_#1":false,"strip_trailing_comments":true,"target_self":false},"package_post_install_note":"Be sure to check out 'help $scheduler' for how to use this, and consider installing 'The Almighty Scheduler Wizard Verbs' for some helper verbs for interacting and viewing info on your $scheduler.","package_url":"https://raw.githubusercontent.com/sevenecks/moo-package-manager/master/packages/the_almighty_scheduler_1_0","package_version":1.0}
